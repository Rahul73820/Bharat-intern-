 import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

 
df = pd.read_csv('your_stock_data.csv')

 
df['Date'] = pd.to_datetime(df['Date'])
df.sort_values(by='Date', inplace=True)
df.set_index('Date', inplace=True)
 
data = df['Close'].values.reshape(-1, 1)
 
scaler = MinMaxScaler()
data = scaler.fit_transform(data)
 
def create_sequences(data, seq_length):
    sequences = []
    target = []
    for i in range(len(data) - seq_length):
        seq = data[i:i+seq_length]
        target_val = data[i+seq_length]
        sequences.append(seq)
        target.append(target_val)
    return np.array(sequences), np.array(target)

# Define hyperparameters
seq_length = 10
epochs = 50
batch_size = 32

 
sequences, target = create_sequences(data, seq_length)
train_size = int(0.8 * len(sequences))
X_train, y_train = sequences[:train_size], target[:train_size]
X_test, y_test = sequences[train_size:], target[train_size:]

 
model = Sequential()
model.add(LSTM(50, input_shape=(seq_length, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mean_squared_error')

 
model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=2)
 
predictions = model.predict(X_test)

 
predictions = scaler.inverse_transform(predictions)
y_test = scaler.inverse_transform(y_test)


mse = mean_squared_error(y_test, predictions)
print(f"Mean Squared Error (MSE): {mse}")

plt.figure(figsize=(12, 6))
plt.plot(df.index[-len(y_test):], y_test, label='Actual Price', color='blue')
plt.plot(df.index[-len(predictions):], predictions, label='Predicted Price', color='red')
plt.title('Stock Price Prediction')
plt.xlabel('Date')
plt.ylabel('Price')
plt.legend()
plt.show()
